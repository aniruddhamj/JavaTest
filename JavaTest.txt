Q1: Merge two arrays by satisfying given constraints

import java.util.Arrays;
class Main
{
    private static void merge(int[] X, int[] Y, int m, int n)
    {
        int k = m + n + 1;
        while (m >= 0 && n >= 0)
        {
            if (X[m] > Y[n]) {
                X[k--] = X[m--];
            }
            else {
                X[k--] = Y[n--];
            }
        }
        while (n >= 0) {
            X[k--] = Y[n--];
        }
        Arrays.fill(Y, 0);
    }
    public static void rearrange(int[] X, int[] Y)
    {
        if (X.length == 0) {
            return;
        }
        int k = 0;
        for (int value: X)
        {
            if (value != 0) {
                X[k++] = value;
            }
        }
 
        merge(X, Y, k - 1, Y.length - 1);
    }
    public static void main (String[] args)
    {    
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = { 1, 8, 9, 10, 15 };
        rearrange(X, Y);   
        System.out.println(Arrays.toString(X));
    }
}


Q2:Find maximum sum path involving elements of given arrays
Code:
class Main
{
 
    public static int findMaxSum(int[] X, int[] Y)
    {
        int sum = 0;
        int sum_x = 0, sum_y = 0;
        int m = X.length, n = Y.length;
        int i = 0, j = 0;
        
        while (i < m && j < n)
        {
            while (i < m-1 && X[i] == X[i+1]) {
                sum_x += X[i++];
            }
 
            while (j < n-1 && Y[j] == Y[j+1]) {
                sum_y += Y[j++];
            }
 
            if (Y[j] < X[i])
            {
                sum_y += Y[j];
                j++;
            }
 
            else if (X[i] < Y[j])
            {
                sum_x += X[i];
                i++;
            }
 
            else    
            {
                sum += Integer.max(sum_x, sum_y) + X[i];
 
                i++;
                j++;
 
                sum_x = 0;
                sum_y = 0;
            }
        }
        while (i < m) {
            sum_x += X[i++];
        }
 
        
        while (j < n) {
            sum_y += Y[j++];
        }
 
        sum += Integer.max(sum_x, sum_y);
        return sum;
    }
 
    public static void main(String[] args)
    {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };
 
        System.out.println("The maximum sum is " + findMaxSum(X, Y));
    }
}

Q3:Write a Java Program to count the number of words in a string using HashMap.
Code:
import java.util.HashMap;
import java.util.Map;

public class WordCounter {
    public static void main(String[] args) {
        String inputString = "Winsoft Technologies";

        Map<String, Integer> wordCountMap = countWords(inputString);

        System.out.println("Word Count:");
        for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    public static Map<String, Integer> countWords(String inputString) {
        Map<String, Integer> wordCountMap = new HashMap<>();

       
        String[] words = inputString.split("\\s+");

     
        for (String word : words) {
           
            word = word.toLowerCase();
           
            if (wordCountMap.containsKey(word)) {
              
                wordCountMap.put(word, wordCountMap.get(word) + 1);
            } else {
              
                wordCountMap.put(word, 1);
            }
        }

        return wordCountMap;
    }
}


Q4:Write a Java Program to find the duplicate characters in a string.
Code:
//Java Program to find the duplicate characters in a given string
public class Main
{  
     public static void main(String[] args) 
     {  
        String str1 = "Winsoft Technologies";  
        int count;  
        System.out.println("The entered string is: "+str1);
       
        char str[] = str1.toCharArray();  
          
        System.out.println("Duplicate characters in a given string: ");  
      
        for(int i = 0; i <str.length; i++) 
        {  
            count = 1;  
            for(int j = i+1; j <str.length; j++) 
            {  
                if(str[i] == str[j] && str[i] != ' ') 
                {  
                    count++;  
                   
                    str[j] = '0';  
                }  
            }  
            
            if(count > 1 && str[i] != '0')  
                System.out.println(str[i]);  
        }  
    }  
}  
